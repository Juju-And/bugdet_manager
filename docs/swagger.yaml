swagger: '2.0'
info:
  description: >-
    This is a sample server BudgetManager server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).      For this sample, you can use the api
    key `special-key` to test the authorization     filters.
  version: 1.0.0
  title: Budget Manager
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: product
    description: Everything about your products
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: expenses
    description: Access to all expenses
schemes:
  - https
  - http
paths:
  /products:
    post:
      tags:
        - product
      summary: Add a new product to the expenses list
      description: ''
      operationId: addProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Product object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '405':
          description: Invalid input

    get:
      tags:
        - product
      summary: Finds all Products
      description: ''
      operationId: findPetsByStatus
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: All products list
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '400':
          description: No products found

  '/products/{productId}':
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    put:
      tags:
        - product
      summary: Updates a product in the manager with form data
      description: ''
      operationId: updateProductWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the product
          required: false
          type: string
        - name: price
          in: formData
          description: Updated price of the product
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - product
      summary: Deletes a product
      description: ''
      operationId: deleteProduct
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: Product id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
  /expenses:
    get:
      tags:
        - expenses
      summary: Returns products by sort
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters:
        - name: sort
          in: query
          description: Sort fields
          required: true
          type: array
          items:
            type: string
            enum:
              - date
              - price
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '400':
          description: Invalid sort value
    post:
      tags:
        - expenses
      summary: Creates a list of expenses
      description: ''
      operationId: createExpenses
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/Expenses'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Expenses'
        '400':
          description: Invalid Order

  '/expenses/{expenseId}':
    get:
      tags:
        - expenses
      summary: Find expense by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.
        Other values will generated exceptions
      operationId: getExpenseById
      produces:
        - application/json
      parameters:
        - name: expenseId
          in: path
          description: ID of expense that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Expenses'
        '400':
          description: Invalid ID supplied
        '404':
          description: Expense not found
    delete:
      tags:
        - expenses
      summary: Delete expense by ID
      description: >-
        For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: deleteExpense
      produces:
        - application/json
      parameters:
        - name: expenseId
          in: path
          description: ID of the expense that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
definitions:
  Expenses:
    type: object
    properties:
      id:
        type: integer
        format: int64
      products:
        type: array
        items:
          type: object
          properties:
            productId:
              type: integer
              format: int64
            name:
              type: string
              example: shampoo
            price:
              type: integer
              format: int32
  Product:
    type: object
    required:
      - name
      - price
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Product'
      name:
        type: string
        example: shampoo
      price:
        type: integer
        format: int32
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
